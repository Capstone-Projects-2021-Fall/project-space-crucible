Index: core/src/main/java/core/server/SpaceClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.server;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.esotericsoftware.kryonet.Client;\r\nimport com.esotericsoftware.kryonet.Connection;\r\nimport com.esotericsoftware.kryonet.Listener;\r\nimport core.gdx.wad.GameScreen;\r\nimport core.server.Network.*;\r\nimport core.wad.funcs.SoundFuncs;\r\n\r\n\r\nimport java.io.IOException;\r\n\r\n\r\npublic class SpaceClient extends Listener {\r\n\r\n    Client client;\r\n    static String ip = \"localhost\";\r\n    GameScreen screen;\r\n\r\n    public SpaceClient(GameScreen screen){\r\n        System.out.println(\"Connecting to the server!\");\r\n        //Create a client object\r\n        client = new Client(20000, 20000);\r\n        client.start();\r\n        //register the packets\r\n        Network.register(client);\r\n        this.screen = screen;\r\n\r\n        client.addListener(new ThreadedListener(new Listener() {\r\n            public void connected (Connection connection) {\r\n            }\r\n\r\n            public void received (Connection connection, Object object) {\r\n\r\n                //If the server sends RenderData object update the client's gamescreen\r\n                if(object instanceof RenderData){\r\n                    screen.setRenderData((RenderData) object);\r\n                }\r\n\r\n                //If server sends MIDIData, change client's music\r\n                else if (object instanceof MIDIData) {\r\n                    if (((MIDIData) object).midi != null && !((MIDIData) object).midi.equals(\"\") ) {\r\n                        SoundFuncs.playMIDI(((MIDIData) object).midi);\r\n                    } else {\r\n                        SoundFuncs.stopMIDI();\r\n                    }\r\n                }else if(object instanceof ClientData){\r\n                    System.out.println(\"received data\");\r\n                    screen.setClientData((ClientData) object);\r\n                }\r\n\r\n                //If server sends SoundData, play sound matching the given name\r\n                else if (object instanceof SoundData) {\r\n                    SoundFuncs.playSound(((SoundData) object).sound);\r\n                }\r\n\r\n            }\r\n            public void disconnected (Connection connection) {\r\n                System.exit(0);\r\n            }\r\n        }));\r\n\r\n\r\n        //Connect the client to the server\r\n        try {\r\n            client.connect(5000, ip, Network.tcpPort, Network.udpPort);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void getInput(boolean[] controls){\r\n        InputData inputData = new InputData();\r\n        inputData.controls = controls;\r\n        inputData.angle = screen.getAngle();\r\n        client.sendTCP(inputData);\r\n    }\r\n\r\n    public Client getClient(){\r\n        return client;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/server/SpaceClient.java b/core/src/main/java/core/server/SpaceClient.java
--- a/core/src/main/java/core/server/SpaceClient.java	(revision 91bafe79e3c9293bbbe871e1661d138ecf738b8b)
+++ b/core/src/main/java/core/server/SpaceClient.java	(date 1634945192714)
@@ -46,7 +46,6 @@
                         SoundFuncs.stopMIDI();
                     }
                 }else if(object instanceof ClientData){
-                    System.out.println("received data");
                     screen.setClientData((ClientData) object);
                 }
 
Index: core/src/main/java/core/server/SpaceServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.server;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.utils.Array;\r\nimport com.esotericsoftware.kryonet.Connection;\r\nimport com.esotericsoftware.kryonet.Listener;\r\nimport com.esotericsoftware.kryonet.Server;\r\nimport core.game.logic.GameLogic;\r\nimport core.server.Network.InputData;\r\nimport core.wad.funcs.WadFuncs;\r\nimport net.mtrop.doom.WadFile;\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\n\r\npublic class SpaceServer extends Listener {\r\n\r\n    //Server Object\r\n    Server server;\r\n    Network.ClientData clientData;\r\n    public static HashSet<Integer> connected = new HashSet();\r\n    private final int maxLobbies = 100;\r\n\r\n    //Game loop\r\n    Thread gameLoop = new Thread() {\r\n        @Override\r\n        public void run() {\r\n            GameLogic.start(server);\r\n        }\r\n\r\n        @Override\r\n        public void interrupt() {\r\n            GameLogic.stop();\r\n        }\r\n    };\r\n\r\n    public SpaceServer(int playerCount) throws IOException {\r\n        server = new Server() {\r\n            protected Connection newConnection() {\r\n                // By providing our own connection implementation, we can store per\r\n                // connection state without a connection ID to state look up.\r\n                return new PlayerConnection();\r\n            }\r\n        };\r\n        clientData = new Network.ClientData();\r\n        GameLogic.isSinglePlayer = false;\r\n\r\n        //Loading the wad files\r\n        try {\r\n\r\n            //Read the default .WAD. \"wads\" will eventually be used to store any loaded mods as well as the base .WAD.\r\n            //We only read the .WAD once and take all the information that we need.\r\n            System.out.println(System.getProperty(\"user.dir\"));\r\n            WadFile file = new WadFile(Gdx.files.internal(\"assets/resource.wad\").file());\r\n            Array<WadFile> wads = new Array<>();\r\n            wads.add(file);\r\n\r\n            //Load all of the level data and the graphics before closing the .WAD\r\n            GameLogic.loadLevels(file, wads);\r\n\r\n            //When we add add-on support we will also close other files inside of 'wads\"\r\n            file.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n\r\n        //Load prepare all Entity logic, open game screen and initiate game loop.\r\n        WadFuncs.loadStates();\r\n        WadFuncs.setEntityTypes();\r\n        GameLogic.loadEntities(GameLogic.currentLevel, false);\r\n        Network.register(server);\r\n\r\n        server.addListener(new Listener(){\r\n\r\n            //When the client connects to the server add a player entity to the game\r\n            public void connected(Connection c){\r\n                System.out.println(\"Client connected: \" + c.getRemoteAddressTCP().getHostString());\r\n                connected.add(c.getID());\r\n                clientData.connected = connected;\r\n                server.sendToAllTCP(clientData);\r\n\r\n                //Wait for everyone to connect\r\n                if(connected.size() == playerCount && !gameLoop.isAlive()){\r\n                    GameLogic.currentLevel = GameLogic.levels.get(1);\r\n                    gameLoop.start();\r\n                }\r\n\r\n            }\r\n            //When the client sends a packet to the server handle it\r\n            public void received(Connection c, Object packetData) {\r\n                PlayerConnection connection = (PlayerConnection) c;\r\n\r\n                //update player movement based on the input\r\n                if(packetData instanceof InputData){\r\n                    InputData input = (InputData) packetData;\r\n                    connection.playerInput = input;\r\n                    GameLogic.getPlayer(c.getID()).controls = input.controls;\r\n                    GameLogic.getPlayer(c.getID()).getPos().angle = input.angle;\r\n                }\r\n            }\r\n            //This method will run when a client disconnects from the server, remove the character from the game\r\n            public void disconnected(Connection c){\r\n                connected.remove(c.getID());\r\n                clientData.connected = connected;\r\n                server.sendToAllTCP(clientData);\r\n                System.out.println(\"Client disconnected! \" + c.getID());\r\n            }\r\n        });\r\n        server.bind(Network.tcpPort, Network.udpPort);\r\n        server.start();\r\n        System.out.println(\"Server is running\");\r\n    }\r\n\r\n    static class PlayerConnection extends Connection{\r\n        public InputData playerInput;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/server/SpaceServer.java b/core/src/main/java/core/server/SpaceServer.java
--- a/core/src/main/java/core/server/SpaceServer.java	(revision 91bafe79e3c9293bbbe871e1661d138ecf738b8b)
+++ b/core/src/main/java/core/server/SpaceServer.java	(date 1634945376647)
@@ -18,7 +18,6 @@
     Server server;
     Network.ClientData clientData;
     public static HashSet<Integer> connected = new HashSet();
-    private final int maxLobbies = 100;
 
     //Game loop
     Thread gameLoop = new Thread() {
