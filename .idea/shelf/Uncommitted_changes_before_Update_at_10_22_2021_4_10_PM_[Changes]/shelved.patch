Index: core/src/main/java/core/gdx/wad/GameScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.gdx.wad;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input;\r\nimport com.badlogic.gdx.Screen;\r\nimport com.badlogic.gdx.graphics.GL20;\r\nimport com.badlogic.gdx.graphics.OrthographicCamera;\r\nimport com.badlogic.gdx.graphics.Texture;\r\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\r\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\r\nimport com.badlogic.gdx.math.Vector2;\r\nimport com.badlogic.gdx.math.Vector3;\r\nimport com.badlogic.gdx.scenes.scene2d.Stage;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\r\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\r\nimport core.game.entities.Entity;\r\nimport core.game.logic.GameLogic;\r\nimport core.game.entities.PlayerPawn;\r\nimport core.server.SpaceClient;\r\nimport core.server.Network.RenderData;\r\nimport core.wad.funcs.MIDIFuncs;\r\nimport core.server.Network.ClientData;\r\n\r\npublic class GameScreen implements Screen {\r\n\r\n    Thread gameLoop;\r\n    SpaceClient client;\r\n    RenderData renderData = new RenderData();\r\n    ClientData clientData = new ClientData();\r\n    int lobbySize = 2;\r\n\r\n    //screen\r\n    OrthographicCamera camera;\r\n    private final Vector2 mouseInWorld2D = new Vector2();\r\n    private final Vector3 mouseInWorld3D = new Vector3();\r\n    ShapeRenderer sr = new ShapeRenderer();\r\n    boolean showBoxes = false;\r\n    boolean isSinglePlayer;\r\n    float angle = 0;\r\n\r\n    //graphics\r\n    SpriteBatch batch;\r\n    Stage lobbyStage;\r\n    Texture background = new Texture(\"spaceBackground.png\");\r\n    Skin uiSkin = new Skin(Gdx.files.internal(\"uiSkin.json\"));\r\n\r\n    public GameScreen(Thread gameLoop, boolean isSinglePlayer) {\r\n        this.gameLoop = gameLoop;\r\n        GameLogic.loadEntities(GameLogic.currentLevel, false);\r\n        camera = new OrthographicCamera();\r\n        camera.setToOrtho(false, 1920, 1080);\r\n        batch = new SpriteBatch();\r\n        lobbyStage = new Stage();\r\n        this.isSinglePlayer = isSinglePlayer;\r\n        if(!isSinglePlayer){ //If it is co-op mode create a new client.\r\n            client = new SpaceClient(this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void show() {\r\n        if (isSinglePlayer) {\r\n            gameLoop.start();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void render(float delta) {\r\n        if (GameLogic.switchingLevels || GameLogic.getPlayer(1) == null) {return;}\r\n\r\n        Gdx.gl.glClearColor(0,0,0,1F);\r\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\r\n        if(clientData.connected != null) {\r\n            if (isSinglePlayer == false && clientData.connected.size() <= lobbySize) {\r\n                lobbyStage.act(Gdx.graphics.getDeltaTime()); //Perform ui logic\r\n                lobbyStage.getBatch().begin();\r\n                lobbyStage.getBatch().draw(background, 0, 0, lobbyStage.getWidth(), lobbyStage.getHeight());\r\n                int x = 100;\r\n                int y = 400;\r\n                for (int element : clientData.connected) {\r\n                    String clientId = \"Player \" + element;\r\n                    TextButton player = new TextButton(clientId, uiSkin);\r\n                    player.setBounds(x, y, 80, 50);\r\n                    lobbyStage.addActor(player);\r\n                    y -= 50;\r\n                }\r\n                lobbyStage.getBatch().end();\r\n                lobbyStage.draw(); //Draw the ui\r\n            }\r\n        }\r\n\r\n        getAngle(isSinglePlayer);\r\n        if(isSinglePlayer)\r\n            GameLogic.getPlayer(1).getPos().angle = angle; //Turn the vector2 into a degree angle\r\n\r\n        if(isSinglePlayer) {\r\n            camera.position.set(GameLogic.getPlayer(1).getPos().x + GameLogic.getPlayer(1).getWidth() / (float) 2.0,\r\n                    GameLogic.getPlayer(1).getPos().y + GameLogic.getPlayer(1).getHeight() / (float) 2.0, 0);\r\n        } else if(renderData.tiles != null && renderData.entityList != null){\r\n            camera.position.set(getPlayer(1).getPos().x + getPlayer(1).getWidth() / (float) 2.0,\r\n                    getPlayer(1).getPos().y + getPlayer(1).getHeight() / (float) 2.0, 0);\r\n        }\r\n        camera.update();\r\n\r\n        batch.setProjectionMatrix(camera.combined);\r\n        batch.enableBlending();\r\n        batch.begin();\r\n        if(isSinglePlayer) {\r\n            RenderFuncs.worldDraw(batch, GameLogic.currentLevel.getTiles());\r\n            RenderFuncs.entityDraw(batch, GameLogic.entityList);\r\n\r\n        }else if(renderData.tiles != null && renderData.entityList != null){\r\n            RenderFuncs.worldDraw(batch, renderData.tiles);\r\n            RenderFuncs.entityDraw(batch, renderData.entityList);\r\n        }\r\n        batch.end();\r\n\r\n        if (showBoxes) {\r\n            showBoxes();\r\n        }\r\n\r\n        if (showBoxes) {showBoxes();}\r\n\r\n        if (Gdx.input.isKeyJustPressed(Input.Keys.EQUALS)) {\r\n            showBoxes = !showBoxes;\r\n        }\r\n        if(!isSinglePlayer) {\r\n            client.getInput(getControls());\r\n        } else {\r\n            GameLogic.getPlayer(1).controls = getControls();\r\n        }\r\n    }\r\n    private void showBoxes() {\r\n        sr.setProjectionMatrix(camera.combined);\r\n        sr.begin(ShapeRenderer.ShapeType.Line);\r\n        for (Entity e : GameLogic.entityList) {\r\n            sr.rect(e.getBounds().x, e.getBounds().y, e.getBounds().width, e.getBounds().height);\r\n        }\r\n        sr.end();\r\n    }\r\n\r\n    public float getAngle(boolean isSinglePlayer){\r\n        //This centers the camera to the player\r\n        //Get the angle where the mouse is pointing to on the screen in relation to where the player is\r\n        //Referenced code - https://stackoverflow.com/questions/16381031/get-cursor-position-in-libgdx\r\n        if (isSinglePlayer) {\r\n            mouseInWorld3D.x = Gdx.input.getX() - GameLogic.getPlayer(1).getPos().x;\r\n            mouseInWorld3D.y = Gdx.input.getY() + GameLogic.getPlayer(1).getPos().y;\r\n        } else if(renderData.tiles != null && renderData.entityList != null) {\r\n            mouseInWorld3D.x = Gdx.input.getX() - getPlayer(1).getPos().x;\r\n            mouseInWorld3D.y = Gdx.input.getY() + getPlayer(1).getPos().y;\r\n        }\r\n        mouseInWorld3D.z = 0;\r\n        camera.unproject(mouseInWorld3D); //unprojecting will give game world coordinates matching the pointer's position\r\n        mouseInWorld2D.x = mouseInWorld3D.x;\r\n        mouseInWorld2D.y = mouseInWorld3D.y;\r\n        angle = mouseInWorld2D.angleDeg();\r\n        return angle;\r\n    }\r\n\r\n    @Override\r\n    public void resize(int width, int height) {\r\n        camera.viewportWidth = width;\r\n        camera.viewportHeight = height;\r\n    }\r\n\r\n    @Override\r\n    public void pause() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void resume() {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void hide() {\r\n        if(gameLoop != null)\r\n            gameLoop.interrupt();\r\n        MIDIFuncs.stopMIDI();\r\n        MIDIFuncs.closeSequencer();\r\n        System.exit(0);\r\n    }\r\n\r\n    @Override\r\n    public void dispose() {\r\n    }\r\n\r\n    public float getAngle() {\r\n        return angle;\r\n    }\r\n\r\n    public void setRenderData(RenderData object) {\r\n        renderData = object;\r\n    }\r\n\r\n    public void setClientData(ClientData object) {\r\n        clientData = object;\r\n    }\r\n\r\n    private boolean[] getControls() {\r\n        boolean[] controls = new boolean[5];\r\n        controls[GameLogic.UP] = Gdx.input.isKeyPressed(Input.Keys.W) || Gdx.input.isKeyPressed(Input.Keys.UP);\r\n        controls[GameLogic.DOWN] = Gdx.input.isKeyPressed(Input.Keys.S) || Gdx.input.isKeyPressed(Input.Keys.DOWN);\r\n        controls[GameLogic.LEFT] = Gdx.input.isKeyPressed(Input.Keys.A) || Gdx.input.isKeyPressed(Input.Keys.LEFT);\r\n        controls[GameLogic.RIGHT] = Gdx.input.isKeyPressed(Input.Keys.D) || Gdx.input.isKeyPressed(Input.Keys.RIGHT);\r\n        controls[GameLogic.SHOOT] = Gdx.input.isButtonJustPressed(Input.Buttons.LEFT);\r\n\r\n        return controls;\r\n    }\r\n\r\n    private PlayerPawn getPlayer(int tag) {\r\n\r\n        for (Entity e : renderData.entityList) {\r\n            if (e instanceof PlayerPawn && e.getTag() == tag) {\r\n                return (PlayerPawn) e;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/gdx/wad/GameScreen.java b/core/src/main/java/core/gdx/wad/GameScreen.java
--- a/core/src/main/java/core/gdx/wad/GameScreen.java	(revision 1d1fce75fc67995746bbf0607419b76730d880af)
+++ b/core/src/main/java/core/gdx/wad/GameScreen.java	(date 1634925422564)
@@ -42,7 +42,7 @@
     SpriteBatch batch;
     Stage lobbyStage;
     Texture background = new Texture("spaceBackground.png");
-    Skin uiSkin = new Skin(Gdx.files.internal("uiSkin.json"));
+    Skin uiSkin = new Skin(Gdx.files.internal("uiskin.json"));
 
     public GameScreen(Thread gameLoop, boolean isSinglePlayer) {
         this.gameLoop = gameLoop;
