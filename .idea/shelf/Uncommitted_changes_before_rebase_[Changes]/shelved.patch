Index: core/src/main/java/core/server/SpaceServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.server;\r\n\r\nimport com.esotericsoftware.kryo.Kryo;\r\nimport com.esotericsoftware.kryonet.Connection;\r\nimport com.esotericsoftware.kryonet.Listener;\r\nimport com.esotericsoftware.kryonet.Server;\r\nimport core.game.entities.Entity;\r\nimport core.game.entities.PlayerPawn;\r\nimport core.server.Network.UpdatePlayer;\r\nimport core.server.Network.MovePlayer;\r\nimport core.server.Network.AddPlayer;\r\nimport core.server.Network.RemovePlayer;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.util.HashSet;\r\n\r\npublic class SpaceServer extends Listener {\r\n\r\n    //Server Object\r\n    Server server;\r\n    HashSet<PlayerPawn> connected = new HashSet();\r\n\r\n    public SpaceServer() throws IOException {\r\n        server = new Server() {\r\n            protected Connection newConnection() {\r\n                // By providing our own connection implementation, we can store per\r\n                // connection state without a connection ID to state look up.\r\n                return new PlayerConnection();\r\n            }\r\n        };\r\n        Network.register(server);\r\n\r\n        server.addListener(new Listener(){\r\n\r\n            //When the client connects to the server add a player entity to the game\r\n            public void connected(Connection c){\r\n                System.out.println(\"Client connected: \" + c.getRemoteAddressTCP().getHostString());\r\n                PlayerConnection connection = (PlayerConnection) c;\r\n                PlayerPawn player = connection.player;\r\n\r\n                //If the player with the same tag already exists reject the connection\r\n                for(PlayerPawn otherPlayer: connected) {\r\n                    if(otherPlayer.getTag() == player.getTag()) {\r\n                        c.close();\r\n                        return;\r\n                    }\r\n                }\r\n                //Load the player in the game server side\r\n                player = loadPlayer(c.getID());\r\n\r\n                //Add existing client's player entity to newly connected client\r\n                for(PlayerPawn otherPlayer: connected){\r\n                    AddPlayer addPlayer = new AddPlayer();\r\n                    addPlayer.player = player;\r\n                    connection.sendTCP(addPlayer);\r\n                }\r\n                connected.add(player);\r\n\r\n                //Add newly connected client's player entity to all existing client\r\n                AddPlayer addPlayer = new Network.AddPlayer();\r\n                addPlayer.player = player;\r\n                server.sendToAllTCP(addPlayer);\r\n            }\r\n            //When the client sends a packet to the server handle it\r\n            public void received(Connection c, Object p) {\r\n                PlayerConnection connection = (PlayerConnection) c;\r\n                PlayerPawn player = connection.player;\r\n\r\n                if(p instanceof Network.MovePlayer){\r\n                    //Move the player in the server\r\n                    MovePlayer msg = (MovePlayer) p;\r\n                    player.getPos().x += msg.x;\r\n                    player.getPos().y += msg.y;\r\n\r\n                    //send the player movement back to the clients\r\n                    UpdatePlayer update = new UpdatePlayer();\r\n                    update.id = player.getTag();\r\n                    update.x = player.getPos().x;\r\n                    update.y = player.getPos().y;\r\n                    server.sendToAllTCP(update);\r\n                    return;\r\n                }\r\n            }\r\n            //This method will run when a client disconnects from the server, remove the character from the game\r\n            public void disconnected(Connection c){\r\n                PlayerConnection connection = (PlayerConnection) c;\r\n                if(connection.player != null){\r\n                    RemovePlayer removePlayer = new RemovePlayer();\r\n                    removePlayer.id = connection.player.getTag();\r\n                    server.sendToAllTCP(removePlayer);\r\n                }\r\n                System.out.println(\"Client disconnected! \" + c.getID());\r\n            }\r\n        });\r\n        server.bind(Network.tcpPort, Network.udpPort);\r\n        server.start();\r\n    }\r\n\r\n    PlayerPawn loadPlayer(int id){\r\n        //Load player in the game\r\n        Entity.Position pos = new Entity.Position(0,0,0);\r\n        PlayerPawn player = new PlayerPawn(pos,0);\r\n        return player;\r\n    }\r\n\r\n    static class PlayerConnection extends Connection{\r\n        public PlayerPawn player;\r\n    }\r\n\r\n    public static void main (String[] args) throws IOException {\r\n        new SpaceServer();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/server/SpaceServer.java b/core/src/main/java/core/server/SpaceServer.java
--- a/core/src/main/java/core/server/SpaceServer.java	(revision 932468d0939598bd76158aee1bddd526dab99cc2)
+++ b/core/src/main/java/core/server/SpaceServer.java	(date 1634412593651)
@@ -10,6 +10,9 @@
 import core.server.Network.MovePlayer;
 import core.server.Network.AddPlayer;
 import core.server.Network.RemovePlayer;
+import core.server.Network.InputData;
+import core.server.Network.RenderData;
+
 
 
 import java.io.IOException;
@@ -63,13 +66,13 @@
                 server.sendToAllTCP(addPlayer);
             }
             //When the client sends a packet to the server handle it
-            public void received(Connection c, Object p) {
+            public void received(Connection c, Object packetData) {
                 PlayerConnection connection = (PlayerConnection) c;
                 PlayerPawn player = connection.player;
 
-                if(p instanceof Network.MovePlayer){
+                if(packetData instanceof MovePlayer){
                     //Move the player in the server
-                    MovePlayer msg = (MovePlayer) p;
+                    MovePlayer msg = (MovePlayer) packetData;
                     player.getPos().x += msg.x;
                     player.getPos().y += msg.y;
 
@@ -81,6 +84,14 @@
                     server.sendToAllTCP(update);
                     return;
                 }
+
+                if(packetData instanceof InputData){
+                    InputData input = (InputData) packetData;
+                    //update player movement based on the input
+                    RenderData renderData = new RenderData();
+                    //Update render data to send back to client
+                    c.sendTCP(renderData);
+                }
             }
             //This method will run when a client disconnects from the server, remove the character from the game
             public void disconnected(Connection c){
Index: core/src/main/java/core/server/Network.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.server;\r\n\r\nimport com.esotericsoftware.kryo.Kryo;\r\nimport com.esotericsoftware.kryonet.EndPoint;\r\nimport core.game.entities.PlayerPawn;\r\n\r\n//This class will store things common to both client and server\r\npublic class Network {\r\n\r\n    //Ports for clients to listen on\r\n    public static int udpPort = 27960, tcpPort = 27970;\r\n\r\n    public static void register(EndPoint endPoint){\r\n        Kryo kryo = endPoint.getKryo();\r\n        kryo.register(UpdatePlayer.class);\r\n        kryo.register(AddPlayer.class);\r\n        kryo.register(MovePlayer.class);\r\n        kryo.register(RemovePlayer.class);\r\n    }\r\n\r\n    public static class AddPlayer{\r\n        public PlayerPawn player;\r\n    }\r\n\r\n    public static class UpdatePlayer{\r\n        public int id;\r\n        public float x, y;\r\n    }\r\n\r\n    public static class MovePlayer{\r\n        public float x, y;\r\n    }\r\n\r\n    public static class RemovePlayer{\r\n        public int id;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/server/Network.java b/core/src/main/java/core/server/Network.java
--- a/core/src/main/java/core/server/Network.java	(revision 932468d0939598bd76158aee1bddd526dab99cc2)
+++ b/core/src/main/java/core/server/Network.java	(date 1634411531776)
@@ -1,8 +1,13 @@
 package core.server;
 
+import com.badlogic.gdx.Input;
 import com.esotericsoftware.kryo.Kryo;
 import com.esotericsoftware.kryonet.EndPoint;
+import core.game.entities.Entity;
 import core.game.entities.PlayerPawn;
+import core.level.info.LevelTile;
+
+import java.util.ArrayList;
 
 //This class will store things common to both client and server
 public class Network {
@@ -16,22 +21,39 @@
         kryo.register(AddPlayer.class);
         kryo.register(MovePlayer.class);
         kryo.register(RemovePlayer.class);
+        kryo.register(RenderData.class);
+        kryo.register(InputData.class);
     }
 
+    //Send this to the CLIENT
     public static class AddPlayer{
         public PlayerPawn player;
     }
 
+    //Send this to the CLIENT
     public static class UpdatePlayer{
         public int id;
         public float x, y;
     }
 
+    //Send this to the Server
     public static class MovePlayer{
         public float x, y;
     }
 
+    //Send this to the CLIENT
     public static class RemovePlayer{
         public int id;
     }
+
+    //Send this to the CLIENT
+    public static class RenderData {
+        public ArrayList<Entity> entityList;
+        public ArrayList<LevelTile> tiles;
+    }
+
+    //Send this to the SERVER
+    public static class InputData {
+        public Input playerInput; //This has the .isKeyPressed, etc methods.
+    }
 }
Index: core/src/main/java/core/server/SpaceClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package core.server;\r\n\r\nimport com.badlogic.gdx.Gdx;\r\nimport com.badlogic.gdx.Input;\r\nimport com.badlogic.gdx.InputMultiplexer;\r\nimport com.badlogic.gdx.Net;\r\nimport com.badlogic.gdx.input.GestureDetector;\r\nimport com.esotericsoftware.kryo.Kryo;\r\nimport com.esotericsoftware.kryonet.Client;\r\nimport com.esotericsoftware.kryonet.Connection;\r\nimport com.esotericsoftware.kryonet.Listener;\r\nimport core.game.entities.PlayerPawn;\r\nimport core.server.Network.*;\r\n\r\n\r\nimport java.io.IOException;\r\n\r\n\r\npublic class SpaceClient extends Listener {\r\n\r\n    Client client;\r\n    static String ip = \"localhost\";\r\n\r\n    public SpaceClient(){\r\n        System.out.println(\"Connecting to the server!\");\r\n        //Create a client object\r\n        client = new Client();\r\n        client.start();\r\n        //register the packets\r\n        Network.register(client);\r\n\r\n        client.addListener(new ThreadedListener(new Listener() {\r\n            public void connected (Connection connection) {\r\n            }\r\n\r\n            public void received (Connection connection, Object object) {\r\n                if (object instanceof AddPlayer) {\r\n                    AddPlayer msg = (AddPlayer) object;\r\n                    addPlayer(msg.player);\r\n                    return;\r\n                }\r\n                if (object instanceof UpdatePlayer) {\r\n                    updatePlayer((UpdatePlayer) object);\r\n                    return;\r\n                }\r\n                if (object instanceof RemovePlayer) {\r\n                    //msg contains the player tag\r\n                    RemovePlayer msg = (RemovePlayer) object;\r\n                    removePlayer(msg.id);\r\n                    return;\r\n                }\r\n            }\r\n            public void disconnected (Connection connection) {\r\n                System.exit(0);\r\n            }\r\n        }));\r\n\r\n\r\n        //Connect the client to the server\r\n        try {\r\n            client.connect(5000, ip, Network.tcpPort, Network.udpPort);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //This loop will handle all the movement from the player and send it to the server as a MovePlayer instance\r\n        while(true){\r\n            UpdateMovement();\r\n        }\r\n    }\r\n\r\n    public void addPlayer(PlayerPawn player){\r\n        //Add the player to the game\r\n    }\r\n    public void updatePlayer(UpdatePlayer msg){\r\n        //Update the player\r\n    }\r\n    public void removePlayer(int playerTag){\r\n        //Remove the player entity from the game\r\n    }\r\n\r\n    public void UpdateMovement(){\r\n        Network.MovePlayer msg = new Network.MovePlayer();\r\n        int speed = 120;\r\n        msg = null;\r\n        if(Gdx.input.isKeyPressed(Input.Keys.LEFT) || Gdx.input.isKeyPressed(Input.Keys.A))\r\n            msg.x -= speed * Gdx.graphics.getDeltaTime();\r\n        if(Gdx.input.isKeyPressed(Input.Keys.RIGHT) || Gdx.input.isKeyPressed(Input.Keys.D))\r\n            msg.x += speed * Gdx.graphics.getDeltaTime();\r\n        if(Gdx.input.isKeyPressed(Input.Keys.UP) || Gdx.input.isKeyPressed(Input.Keys.W))\r\n            msg.y += speed * Gdx.graphics.getDeltaTime();\r\n        if(Gdx.input.isKeyPressed(Input.Keys.DOWN) || Gdx.input.isKeyPressed(Input.Keys.S))\r\n            msg.y -= speed * Gdx.graphics.getDeltaTime();\r\n\r\n        if(msg != null)\r\n            client.sendTCP(msg);\r\n    }\r\n\r\n\r\n    public static void main(String[] args) throws Exception{\r\n        new SpaceClient();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/core/src/main/java/core/server/SpaceClient.java b/core/src/main/java/core/server/SpaceClient.java
--- a/core/src/main/java/core/server/SpaceClient.java	(revision 932468d0939598bd76158aee1bddd526dab99cc2)
+++ b/core/src/main/java/core/server/SpaceClient.java	(date 1634412593659)
@@ -49,6 +49,12 @@
                     removePlayer(msg.id);
                     return;
                 }
+                //If the server sends RenderData object update the client's gamescreen
+                if(object instanceof RenderData){
+                    RenderData packet = (RenderData) object;
+                    renderData(packet);
+                    return;
+                }
             }
             public void disconnected (Connection connection) {
                 System.exit(0);
@@ -68,6 +74,10 @@
         }
     }
 
+    private void renderData(RenderData packet) {
+        //Render the client screen
+    }
+
     public void addPlayer(PlayerPawn player){
         //Add the player to the game
     }
@@ -79,7 +89,7 @@
     }
 
     public void UpdateMovement(){
-        Network.MovePlayer msg = new Network.MovePlayer();
+        MovePlayer msg = new MovePlayer();
         int speed = 120;
         msg = null;
         if(Gdx.input.isKeyPressed(Input.Keys.LEFT) || Gdx.input.isKeyPressed(Input.Keys.A))
